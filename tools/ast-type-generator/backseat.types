{
#include "error_codes.hpp"
#include "lexer.hpp"
#include <memory>
#include <tl/expected.hpp>
#include <tl/optional.hpp>
#include <vector>
}

type Name {
    std::vector<Token> tokens;
}

type ReturnType {
    Token tilde_arrow;
    Name type;
}

Statement =
    ImportStatement(
        import_token {Token}
        module_name by_move { std::vector<Token> }
        semicolon_token{ Token }
    )
    | Block(
        statements by_move { std::vector<std::unique_ptr<Statement>> }
    )
    | FunctionDefinition(
        function_keyword {Token}
        identifier {Token}
        left_parenthesis {Token}
        // todo: parameter list
        right_parenthesis {Token}
        return_type by_move {tl::optional<ReturnType>}
        body {Block}
    )

Expression =
    BinaryOperator(
        lhs { std::unique_ptr<Expression> }
        operator { Token }
        rhs { std::unique_ptr<Expression> }
    )
    | UnaryOperator(
        operator { Token }
        sub_expression { std::unique_ptr<Expression> }
    )
